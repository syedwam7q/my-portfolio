@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 255, 255, 255;
  --background-start-rgb: 0, 0, 0;
  --background-end-rgb: 10, 10, 20;
}

/* Only hide cursor on desktop */
@media (min-width: 768px) {
  * {
    cursor: none;
  }
}

html {
  scroll-behavior: smooth;
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
  font-family: 'Rajdhani', sans-serif;
}

@keyframes slide {
  from {
    transform: translateX(-20px);
  }
  to {
    transform: translateX(20px);
  }
}

@keyframes glitch {
  0% {
    clip-path: inset(40% 0 61% 0);
    transform: translate(-2px, 2px);
  }
  20% {
    clip-path: inset(92% 0 1% 0);
    transform: translate(1px, 4px);
  }
  40% {
    clip-path: inset(43% 0 1% 0);
    transform: translate(3px, 1px);
  }
  60% {
    clip-path: inset(25% 0 58% 0);
    transform: translate(-5px, -2px);
  }
  80% {
    clip-path: inset(54% 0 7% 0);
    transform: translate(2px, -4px);
  }
  100% {
    clip-path: inset(58% 0 43% 0);
    transform: translate(-2px, 2px);
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes scan-line {
  0% {
    top: 0%;
  }
  100% {
    top: 100%;
  }
}

.scan-line {
  position: absolute;
  width: 100%;
  height: 5px;
  background: rgba(0, 255, 255, 0.2);
  animation: scan-line 4s linear infinite;
}

.glitch-effect {
  position: relative;
}

.glitch-effect::before,
.glitch-effect::after {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch-effect::before {
  left: 2px;
  text-shadow: -1px 0 #ff00ff;
  animation: glitch 0.3s infinite linear alternate-reverse;
}

.glitch-effect::after {
  left: -2px;
  text-shadow: 1px 0 #00ffff;
  animation: glitch 0.3s infinite linear alternate;
}